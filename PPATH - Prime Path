
/*-----------------With the name of ALLAH--------------*/

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define dl double
#define sf scanf
#define pf printf

#define MS0(x) memset(x,0,sizeof(x))
#define MS1(x) memset(x,1,sizeof(x))
#define SORT(a,n) sort(begin(a),begin(a)+n)
#define REV(a,n) reverse(begin(a),begin(a)+n)

#define loop(i,ini,n) for(ll i=ini;i<=n;i++)
#define rloop(i,ini,n) for(ll i=ini;i>=n;i--)
#define rev_vector(a,n) reverse(begin(a),begin(a)+n)
#define MAX 10003

vector<ll>arra(MAX,0);
ll sum,prime[MAX],digit[4];

//-------------------normal sieve ----------------

void sieve()
{
    arra[0]=1;
    arra[1]=1;

    for(ll i=2;i*i<=MAX;i++)
    {
        if(arra[i]==0)
        {
            for(ll j=i+i;j<MAX;j+=i)
            {
                arra[j]=1;
            }
        }
    }
}

//------------------digit_distribute funtion-------------

void digit_distribute(ll n)
{
    digit[0]=n%10;  n/=10;
    digit[1]=n%10;  n/=10;
    digit[2]=n%10;  n/=10;
    digit[3]=n%10;  n/=10;
}

//------------------convert_to_number function----------

ll convert_to_number(ll i,ll j)
{
    digit[i]=j;
    return digit[0]*1+digit[1]*10+digit[2]*100+digit[3]*1000;
}

//------------------BFS function-------------------

ll BFS(ll src,ll destination)
{
    queue<ll> Q;
    ll visited[MAX]={0},level[MAX]={0};

    Q.push(src);
    visited[src]=1;
    level[src]=0;

    while(!Q.empty())
    {
        ll u=Q.front();
        Q.pop();
        if(u==destination)
            return level[u];
        loop(i,0,3)
        {
            digit_distribute(u);   //just resetting
            loop(j,0,9)
            {
                ll v=convert_to_number(i,j);
                if(visited[v]==0 && v>=1000 && arra[v]==0)
                {
                    Q.push(v);
                    visited[v]=1;
                    level[v]=level[u]+1;
                }
            }
        }
    }
    return -1;
}




//-----------------main function-------------------

int main()
{
    //freopen("inp.txt","r",stdin);
    sieve();
    ll T,n1,n2;
    sf("%lld",&T);
    loop(i,1,T)
    {
        sf("%lld %lld",&n1,&n2);

        if(n1==n2 && arra[n1]!=0)
            pf("Impossible\n");
        else
        {
            ll ans=BFS(n1,n2);
            if(ans==-1)
                pf("Impossible\n");
            else
                pf("%lld\n",ans);
        }
    }
    return 0;
}


